import React, { useState, ChangeEvent, FormEvent } from 'react';

interface MessageInputProps {
  onSendMessage: (message: string) => void;
}

const MessageInput: React.FC<MessageInputProps> = ({ onSendMessage }) => {
  const [message, setMessage] = useState('');

  const handleChange = (event: ChangeEvent<HTMLInputElement>) => {
    setMessage(event.target.value);
  };

  const handleSubmit = (event: FormEvent) => {
    event.preventDefault();
    if (message.trim() !== '') {
      onSendMessage(message);
      setMessage('');
    }
  };

  return (
    <form onSubmit={handleSubmit} className="sticky bottom-0 bg-white p-4 border-t border-gray-300">
      <div className="flex items-center">
        <input
          type="text"
          placeholder="Digite uma mensagem..."
          className="flex-1 border p-2 mr-2"
          value={message}
          onChange={handleChange}
        />
        <button type="submit" className="bg-blue-500 text-white p-2">
          Enviar
        </button>
      </div>
    </form>
  );
};

export default MessageInput;




//
import React, { useState } from 'react';
import MessageInput from './MessageInput';

const ChatPage: React.FC = () => {
  const [messages, setMessages] = useState<string[]>([]);

  const handleSendMessage = (message: string) => {
    setMessages((prevMessages) => [...prevMessages, message]);
  };

  return (
    <div className="flex flex-col min-h-screen">
      {/* ConteÃºdo principal da pÃ¡gina */}
      <div className="flex-1">
        {/* Renderize suas mensagens aqui */}
        {messages.map((msg, index) => (
          <div key={index}>{msg}</div>
        ))}
      </div>

      {/* Componente de entrada de mensagem */}
      <MessageInput onSendMessage={handleSendMessage} />
    </div>
  );
};

export default ChatPage;

